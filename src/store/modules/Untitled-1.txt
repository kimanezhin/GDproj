import Vue from 'vue'
import Vuex from 'vuex'
import Axios from 'axios'
import VueNativeSock from "vue-native-websocket";
import _ from "lodash";
const vm = new Vue();
Vue.use(Vuex)

const m = new Map()

export default new Vuex.Store({
    state: {
        messages: ['s'],
        posts: [],
        token: '',
        socket: {
            isConnected: false,
            message: '',
            reconnectError: false,
        },
    },

    getters: {
        GET_POSTS: state => { return state.posts; },
        GET_TOKEN: state => { return state.token; },
        GET_FULL_NAME: 
    },
    actions: {
        
        FETCH_DATA: async (context) => {
          
            await Axios
                .get("http://websuck1t.herokuapp.com/posts/all")
                .then(response => {
                    let answer = response.data.response;
                    context.commit('SET_TOKEN', response.data.token)
                    for (var i in answer) {
                        context.commit('PUSH_POST', {
                            name: context.dispatch('GET_AUTHOR_NAME', [answer[i].postAuthor, i]),//GET_AUTHOR_NAME(answer[i].postAuthor, i),
                            postId: answer[i].postId,
                            postBody: answer[i].postBody,
                            num: i % 2
                        })
                    }
                });
        },

        GET_AUTHOR_NAME: async (context, payload) => {

            await Axios.get('https://websuck1t.herokuapp.com/users/' + payload[0]).then(response => {
                let fullName = response.data.userName.firstName + ' ' + response.data.userName.secondName
                context.getters.GET_POSTS[payload[1]].name = fullName
            })
        },

        PARSE_SERVER_RESPONSE: (context, payload) => {
            context.commit()
        }

    },
    mutations: {
        SET_TOKEN: (state, payload) => { state.token = payload },
        PUSH_POST: (state, payload) => {
            state.posts.unshift({
                name: payload.name,
                postId: payload.postId,
                postBody: payload.postBody,
                num: payload.num
            })
        },
        UNSHIFT_POST: (state, payload) => { },

        SOCKET_ONOPEN(state, event) {
            state.socket.isConnected = true
            console.log('onOpen')
        },
        SOCKET_ONCLOSE(state, event) {
            state.socket.isConnected = false
        },
        SOCKET_ONERROR(state, event) {
            let self = this
            console.error(state, event)
            console.log('onError')
            let socketURL =
                "ws://websuck1t.herokuapp.com/posts/subscribe/" +
                this.getters.GET_TOKEN;
            vm.$connect(socketURL, { store: self });
        },
        // default handler called for all methods
        SOCKET_ONMESSAGE(state, message) {

            if (state.socket.message != message) {

                let objToDelete = JSON.parse(message.data).response.deleted;
                for (var i in objToDelete) {
                    this.state.posts.splice(_.findIndex(this.state.posts, { postId: objToDelete[i] }), 1);//TODO DELETE
                }
                let objToAdd = JSON.parse(message.data).response.added;
                for (var i in objToAdd) {
                    Axios
                        .get("https://websuck1t.herokuapp.com/posts/" + objToAdd[i])
                        .then(response => {
                            this.state.posts.unshift({ //TODO ADD
                                name: this.getters.GET_FULL_NAME, // this.actions.GET_AUTHOR_NAME('','') ,
                                //  name: "ss",
                                postId: response.data.postId,
                                postBody: response.data.postBody,
                                num: state.posts.length % 2,
                            });
                            console.log(state.posts.length)
                            //  Axios.get('https://websuck1t.herokuapp.com/users/' + response.data.postAuthor).then(resp => {
                            //     let fullName = resp.data.userName.firstName + ' ' + resp.data.userName.secondName
                            //    state.posts[i].name = fullName
                            // })
                        });
                }


                state.socket.message = message;
            }
            //  state.message = message
        },
        // mutations for reconnect methods
        [WebSocket.WS_RECONNECT](state, count) {
            console.info(state, count)
        },
        [WebSocket.WS_RECONNECT_ERROR](state) {
            state.socket.reconnectError = true
        }
    }

})